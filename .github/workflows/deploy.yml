name: CI/CD with Terraform
on: push

jobs:
  deploy-infra:
    runs-on: ubuntu-latest
    outputs:
      SERVER_PUBLIC_IP: ${{ steps.set-ip.outputs.instance_public_ip }}
    steps:
      - name: Check Code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
        
      - name: Terraform Init
        id: init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_STATE_BUCKET_NAME: ${{ secrets.AWS_TF_STATE_BUCKET_NAME }}
          AWS_REGION: us-east-1 
        run: |
          terraform init -backend-config="bucket=${{ env.TF_STATE_BUCKET_NAME }}" -backend-config="region=${{ env.AWS_REGION }}"
        working-directory: ./terraform

      - name: Terraform Plan
        id: plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PRIVATE_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
          PUBLIC_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PUBLIC }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          terraform plan \
          -var="public_key=${{ env.PUBLIC_SSH_KEY }}" \
          -var="private_key=${{ env.PRIVATE_SSH_KEY }}" \
          -var="key_name=deployer-key" \
          -var="aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" \
          -var="aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
          -out=PLAN
        working-directory: ./terraform

      - name: Terraform Apply
        id: apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PRIVATE_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
          PUBLIC_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PUBLIC }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          terraform apply -auto-approve \
          -var="public_key=${{ env.PUBLIC_SSH_KEY }}" \
          -var="private_key=${{ env.PRIVATE_SSH_KEY }}" \
          -var="key_name=deployer-key" \
          -var="aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" \
          -var="aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        working-directory: ./terraform
      - name: Set Output
        id: set-ip
        run: |
          echo "instance_public_ip=$(terraform output -raw instance_public_ip)" >> $GITHUB_OUTPUT
        working-directory: ./terraform
  deploy-app:
          runs-on: ubuntu-latest
          needs: deploy-infra
          steps:
            - name: Checkout
              uses: actions/checkout@v3
      
            - name: SET IP ENV var
              run: echo "SERVER_PUBLIC_IP=${{ needs.deploy-infra.outputs.SERVER_PUBLIC_IP }}" >> $GITHUB_ENV
      
            - name: Debug SERVER_PUBLIC_IP
              run: echo "SERVER_PUBLIC_IP=${{ env.SERVER_PUBLIC_IP }}"
      
            - name: Login into ECR
              id: login-ecr 
              uses: aws-actions/amazon-ecr-login@v1
              with:
                mask-password: true  
              env:
                AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                AWS_REGION: us-east-1 
      
            - name: Build, push docker image 
              env: 
                REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                REPOSITORY: example-node-app
                IMAGE_TAG: ${{ github.sha }}
              run: |
                docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
                docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG  # Don't forget to push the image
    